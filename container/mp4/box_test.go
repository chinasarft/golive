package mp4

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"
)

/*
00000000: 0000 0018 7374 7970 6d73 6468 0000 0000  ....stypmsdh....
00000010: 6d73 6468 6d73 6978 0000 0034 7369 6478  msdhmsix...4sidx
00000020: 0100 0000 0000 0001 0000 3200 0000 0000  ..........2.....
00000030: 0000 0000 0000 0000 0000 0000 0000 0001  ................
00000040: 0002 8b43 0001 5600 8000 0000 0000 0314  ...C..V.........
00000050: 6d6f 6f66 0000 0010 6d66 6864 0000 0000  moof....mfhd....
00000060: 0000 0001 0000 02fc 7472 6166 0000 001c  ........traf....
00000070: 7466 6864 0002 0038 0000 0001 0000 0200  tfhd...8........
00000080: 0000 6fcd 0101 0000 0000 0014 7466 6474  ..o.........tfdt
00000090: 0100 0000 0000 0000 0000 0000 0000 02c4  ................
000000a0: 7472 756e 0000 0205 0000 00ab 0000 031c  trun............
000000b0: 0200 0000 0000 6fcd 0000 018b 0000 0347  ......o........G
000000c0: 0000 0bd0 0000 03c5 0000 035d 0000 031d  ...........]....
000000d0: 0000 025d 0000 0106 0000 034e 0000 0385  ...].......N....
000000e0: 0000 049a 0000 0305 0000 0342 0000 046f  ...........B...o
000000f0: 0000 03bc 0000 0483 0000 047e 0000 02d6  ...........~....
00000100: 0000 20c8 0000 0339 0000 0361 0000 0388  .. ....9...a....
00000110: 0000 0244 0000 0206 0000 0303 0000 0206  ...D............
00000120: 0000 0265 0000 0156 0000 01a3 0000 0204  ...e...V........
00000130: 0000 019b 0000 007b 0000 00d7 0000 010c  .......{........
00000140: 0000 012c 0000 018a 0000 0214 0000 0172  ...,...........r
00000150: 0000 009f 0000 0286 0000 014d 0000 0140  ...........M...@
00000160: 0000 02e4 0000 081c 0000 0222 0000 02c7  ..........."....
00000170: 0000 016c 0000 0193 0000 0151 0000 01c0  ...l.......Q....
00000180: 0000 01b9 0000 012f 0000 00bd 0000 00f0  ......./........
00000190: 0000 0109 0000 014e 0000 017b 0000 0139  .......N...{...9
000001a0: 0000 01a4 0000 010a 0000 03c3 0000 00e5  ................
000001b0: 0000 017a 0000 00f9 0000 0131 0000 3f35  ...z.......1..?5
000001c0: 0000 026c 0000 010a 0000 0df7 0000 0261  ...l...........a
000001d0: 0000 041f 0000 03cf 0000 0467 0000 020e  ...........g....
000001e0: 0000 0476 0000 032f 0000 01d6 0000 01bd  ...v.../........
000001f0: 0000 0c52 0000 02c8 0000 01a5 0000 04b5  ...R............
00000200: 0000 028c 0000 01c1 0000 049f 0000 02e1  ................
00000210: 0000 027c 0000 0181 0000 0274 0000 0241  ...|.......t...A
00000220: 0000 022c 0000 01b4 0000 0daa 0000 05ea  ...,............
00000230: 0000 016b 0000 012a 0000 0379 0000 0279  ...k...*...y...y
00000240: 0000 0203 0000 00eb 0000 01e6 0000 019b  ................
00000250: 0000 0108 0000 0114 0000 02a3 0000 023a  ...............:
00000260: 0000 01ed 0000 01bc 0000 0346 0000 031d  ...........F....
00000270: 0000 0322 0000 0257 0000 0299 0000 024f  ..."...W.......O
00000280: 0000 0354 0000 032a 0000 01b0 0000 0131  ...T...*.......1
00000290: 0000 0407 0000 03e5 0000 01bb 0000 021e  ................
000002a0: 0000 01ed 0000 02a2 0000 01b2 0000 023d  ...............=
000002b0: 0000 0288 0000 0156 0000 05f9 0000 02e3  .......V........
000002c0: 0000 024f 0000 01a4 0000 0227 0000 0ed2  ...O.......'....
000002d0: 0000 032b 0000 0406 0000 02e2 0000 018f  ...+............
000002e0: 0000 020d 0000 023f 0000 033b 0000 03f5  .......?...;....
000002f0: 0000 0260 0000 0770 0000 0327 0000 00d5  ...`...p...'....
00000300: 0000 037a 0000 021a 0000 01e2 0000 0238  ...z...........8
00000310: 0000 0124 0000 0179 0000 0197 0000 018c  ...$...y........
00000320: 0000 01ef 0000 0293 0000 0093 0000 0116  ................
00000330: 0000 0154 0000 00d0 0000 00fa 0000 00cf  ...T............
00000340: 0000 00c6 0000 00f8 0000 0133 0000 00f3  ...........3....
00000350: 0000 012b 0000 00c4 0000 011e 0000 013d  ...+...........=
*/

func TestPraseStypBox(t *testing.T) {
	str := "00000018737479706d736468000000006d7364686d736978"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	b := NewBox()
	r := bytes.NewReader(msgByte)
	resultBox, _, err := b.Parse(r)
	if err != nil {
		t.Error(err)
	}
	stypBox := resultBox.(*StypBox)
	if stypBox == nil {
		t.Errorf("not stypbox")
	}
	//PrintBox(stypBox)
	if stypBox.MajorBrand != 0x6d736468 { //msdh
		t.Errorf("MajorBrand expect to msdh")
	}
	if stypBox.MinorBrand != 0x00 {
		t.Errorf("MinorBrand expect to 0")
	}

	if len(stypBox.CompatibleBrands) != 2 {
		t.Errorf("CompatibleBrands expect len 2:%d", len(stypBox.CompatibleBrands))
	}

	if stypBox.CompatibleBrands[0] != 0x6d736468 { //msdh
		t.Errorf("CompatibleBrands[0] expect to msdh:%x", stypBox.CompatibleBrands[0])
	}

	if stypBox.CompatibleBrands[1] != 0x6d736978 { //msix
		t.Errorf("CompatibleBrands[1] expect to msix:%x", stypBox.CompatibleBrands[1])
	}

	w := &bytes.Buffer{}
	writedLen, err := stypBox.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		t.Errorf("%d should equal:%d", writedLen, len(msgByte))
	}
	if !bytes.Equal(w.Bytes(), msgByte) {
		t.Error("Serialize not equal")
	}
}

func TestPraseSidxBox(t *testing.T) {
	str := "0000003473696478010000000000000100003200000000000000000000000000000000000000000100028b430001560080000000"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	b := NewBox()
	r := bytes.NewReader(msgByte)
	resultBox, _, err := b.Parse(r)
	if err != nil {
		t.Error(err)
	}
	sidxBox := resultBox.(*SidxBox)
	if sidxBox == nil {
		t.Errorf("not stypbox")
	}
	//PrintBox(sidxBox)

	if sidxBox.version != 1 {
		t.Errorf("sidx.version expect to 1:%x", sidxBox.version)
	}

	if sidxBox.flags24Bit != 0 {
		t.Errorf("sidx.flags24Bit expect to 0:%x", sidxBox.flags24Bit)
	}

	if sidxBox.ReferenceID != 1 {
		t.Errorf("sidx.ReferenceID expect to 1:%x", sidxBox.ReferenceID)
	}

	if sidxBox.Timescale != 0x3200 {
		t.Errorf("sidx.Timescale expect to 0x3200:%x", sidxBox.Timescale)
	}

	if sidxBox.EarliestPresentationTime != 0 {
		t.Errorf("sidx.EarliestPresentationTime expect to 0:%x", sidxBox.EarliestPresentationTime)
	}

	if sidxBox.Reserved != 0 {
		t.Errorf("sidx.Reserved expect to 0:%x", sidxBox.Reserved)
	}

	if sidxBox.ReferenceCount != 1 {
		t.Errorf("sidx.ReferenceCount expect to 1:%x", sidxBox.ReferenceCount)
	}

	if len(sidxBox.Refs) != 1 {
		t.Errorf("sidx.Refs expect len to 1:%x", len(sidxBox.Refs))
	}

	if sidxBox.Refs[0].ReferenceType != 0 {
		t.Errorf("sidx.Refs.ReferenceType expect len to 1:%x", sidxBox.Refs[0].ReferenceType)
	}

	if sidxBox.Refs[0].ReferencedSize != 0x28b43 {
		t.Errorf("sidx.Refs[0].ReferencedSize expect len to 1:%x", sidxBox.Refs[0].ReferencedSize)
	}

	if sidxBox.Refs[0].SubsegmentDuration != 0x15600 {
		t.Errorf("sidx.Refs[0].SubsegmentDuration expect len to 0x15600:%x", sidxBox.Refs[0].SubsegmentDuration)
	}

	if sidxBox.Refs[0].StartsWithSAP != 1 {
		t.Errorf("sidx.Refs[0].StartsWithSAP expect len to 1:%x", sidxBox.Refs[0].StartsWithSAP)
	}

	if sidxBox.Refs[0].SAPType != 0 {
		t.Errorf("sidx.Refs[0].SAPType expect len to 0:%x", sidxBox.Refs[0].SAPType)
	}

	if sidxBox.Refs[0].SAPDeltaTime != 0 {
		t.Errorf("sidx.Refs[0].SAPDeltaTime expect len to 1:%x", sidxBox.Refs[0].SAPDeltaTime)
	}

	w := &bytes.Buffer{}
	writedLen, err := sidxBox.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		t.Errorf("%d should equal:%d", writedLen, len(msgByte))
	}
	if !bytes.Equal(w.Bytes(), msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatal("Serialize not equal")
	}
}

func TestPraseMoofBox(t *testing.T) {
	str := "000003146d6f6f66000000106d6668640000000000000001000002fc747261660000001c7466686400020038000000010000" +
		"020000006fcd010100000000001474666474010000000000000000000000000002c47472756e00000205000000ab0000031c" +
		"0200000000006fcd0000018b0000034700000bd0000003c50000035d0000031d0000025d000001060000034e000003850000" +
		"049a00000305000003420000046f000003bc000004830000047e000002d6000020c800000339000003610000038800000244" +
		"0000020600000303000002060000026500000156000001a3000002040000019b0000007b000000d70000010c0000012c0000" +
		"018a00000214000001720000009f000002860000014d00000140000002e40000081c00000222000002c70000016c00000193" +
		"00000151000001c0000001b90000012f000000bd000000f0000001090000014e0000017b00000139000001a40000010a0000" +
		"03c3000000e50000017a000000f90000013100003f350000026c0000010a00000df7000002610000041f000003cf00000467" +
		"0000020e000004760000032f000001d6000001bd00000c52000002c8000001a5000004b50000028c000001c10000049f0000" +
		"02e10000027c0000018100000274000002410000022c000001b400000daa000005ea0000016b0000012a0000037900000279" +
		"00000203000000eb000001e60000019b0000010800000114000002a30000023a000001ed000001bc000003460000031d0000" +
		"032200000257000002990000024f000003540000032a000001b00000013100000407000003e5000001bb0000021e000001ed" +
		"000002a2000001b20000023d0000028800000156000005f9000002e30000024f000001a40000022700000ed20000032b0000" +
		"0406000002e20000018f0000020d0000023f0000033b000003f5000002600000077000000327000000d50000037a0000021a" +
		"000001e2000002380000012400000179000001970000018c000001ef00000293000000930000011600000154000000d00000" +
		"00fa000000cf000000c6000000f800000133000000f30000012b000000c40000011e0000013d"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	b := NewBox()
	r := bytes.NewReader(msgByte)
	resultBox, _, err := b.Parse(r)
	if err != nil {
		t.Error(err)
	}
	moofBox := resultBox.(*MoofBox)
	if moofBox == nil {
		t.Errorf("not moofbox")
	}
	//PrintBox(moofBox)

	// TODO value assert

	w := &bytes.Buffer{}
	writedLen, err := moofBox.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		t.Errorf("%d should equal:%d", writedLen, len(msgByte))
	}
	if !bytes.Equal(w.Bytes(), msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatal("Serialize not equal")
	}
}

func TestPraseDrefBox(t *testing.T) {
	str := "0000001c6472656600000000000000010000000c75726c2000000001"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	r := bytes.NewReader(msgByte)
	b, totalParsedLen, err := ParseBox(r)
	if err != nil {
		t.Errorf("ParseBox fail:%s\n", err)
	}
	if b.BoxType != BoxTypeDREF {
		t.Fatalf("expect BoxTypeDREF:%x\n", b.BoxType)
	}

	drefBox := NewDrefBox(b)
	parsedLen, err := drefBox.Parse(r)
	if err != nil || parsedLen != len(msgByte)-8 {
		t.Errorf("drefBox.Parse fail:%s\n", err)
	}
	totalParsedLen += parsedLen

	if totalParsedLen != 28 {
		t.Fatalf("wrong parse:%d\n", totalParsedLen)
	}

	//PrintBox(drefBox)
}

func TestParseHevcConfig(t *testing.T) {

	str := "01016000000300900000030000f000fcfdf8f800000303200001001840010c01ffff01600000030090000003000003003f95" +
		"9809210001002e42010101600000030090000003000003003fa00f08048596566924cafff0010000f0100000030010000003" +
		"01908022000100074401c172b46240"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	dc := NewHevcDecoderConfigurationRecord()

	r := bytes.NewReader(msgByte)

	if _, err = dc.Parse(r); err != nil {
		t.Fatal(err.Error())
	}

	w := &bytes.Buffer{}
	writedLen, err := dc.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		t.Errorf("%d should equal:%d", writedLen, len(msgByte))
	}
	if !bytes.Equal(w.Bytes(), msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatal("Serialize not equal")
	}
}

func TestParseAvcConfig(t *testing.T) {
	str := "0142c015ffe1001c6742c015d901e096ffc0040003c4000003000400000300c83c58b92001000568cb83cb20"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	dc := NewAVCDecoderConfigurationRecord()

	r := bytes.NewReader(msgByte)

	if _, err = dc.Parse(r); err != nil {
		t.Fatal(err.Error())
	}

	w := &bytes.Buffer{}
	writedLen, err := dc.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		t.Errorf("%d should equal:%d", writedLen, len(msgByte))
	}
	if !bytes.Equal(w.Bytes(), msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatal("Serialize not equal")
	}
	return
}

func TestPraseStsdBox(t *testing.T) {
	str := "000000aa7374736400000000000000010000009a6176633100000000000000010000000000000000000000000000000001e0" +
		"0120004800000048000000000000000100000000000000000000000000000000000000000000000000000000000000000018" +
		"ffff00000034617663430142c015ffe1001c6742c015d901e096ffc0040003c4000003000400000300c83c58b92001000568" +
		"cb83cb200000001070617370000000100000000f"

	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	r := bytes.NewReader(msgByte)
	b, totalParsedLen, err := ParseBox(r)
	if err != nil {
		t.Errorf("ParseBox fail:%s\n", err)
	}
	if b.BoxType != BoxTypeSTSD {
		t.Fatalf("expect BoxTypeSTSD:%x\n", b.BoxType)
	}

	stsdBox := NewStsdBox(b)
	parsedLen, err := stsdBox.Parse(r)
	if err != nil || parsedLen != len(msgByte)-BOX_SIZE {
		t.Errorf("drefBox.Parse fail:%s\n", err.Error())
	}
	totalParsedLen += parsedLen

	if totalParsedLen != len(msgByte) {
		t.Fatalf("wrong parse:%d\n", totalParsedLen)
	}

	//PrintBox(stsdBox)
}

/*
00000010:                     0000 0311 6d6f 6f76  iso6mp41....moov
00000020: 0000 006c 6d76 6864 0000 0000 0000 0000  ...lmvhd........
00000030: 0000 0000 0000 03e8 0000 0000 0001 0000  ................
00000040: 0100 0000 0000 0000 0000 0000 0001 0000  ................
00000050: 0000 0000 0000 0000 0000 0000 0001 0000  ................
00000060: 0000 0000 0000 0000 0000 0000 4000 0000  ............@...
00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000080: 0000 0000 0000 0000 0000 0002 0000 0213  ................
00000090: 7472 616b 0000 005c 746b 6864 0000 0003  trak...\tkhd....
000000a0: 0000 0000 0000 0000 0000 0001 0000 0000  ................
000000b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000c0: 0000 0000 0001 0000 0000 0000 0000 0000  ................
000000d0: 0000 0000 0001 0000 0000 0000 0000 0000  ................
000000e0: 0000 0000 4000 0000 0200 0000 0120 0000  ....@........ ..
000000f0: 0000 0024 6564 7473 0000 001c 656c 7374  ...$edts....elst
00000100: 0000 0000 0000 0001 0000 0000 0000 0000  ................
00000110: 0001 0000 0000 018b 6d64 6961 0000 0020  ........mdia...
00000120: 6d64 6864 0000 0000 0000 0000 0000 0000  mdhd............
00000130: 0000 3200 0000 0000 55c4 0000 0000 002d  ..2.....U......-
00000140: 6864 6c72 0000 0000 0000 0000 7669 6465  hdlr........vide
00000150: 0000 0000 0000 0000 0000 0000 5669 6465  ............Vide
00000160: 6f48 616e 646c 6572 0000 0001 366d 696e  oHandler....6min
00000170: 6600 0000 1476 6d68 6400 0000 0100 0000  f....vmhd.......
00000180: 0000 0000 0000 0000 2464 696e 6600 0000  ........$dinf...
00000190: 1c64 7265 6600 0000 0000 0000 0100 0000  .dref...........
000001a0: 0c75 726c 2000 0000 0100 0000 f673 7462  .url ........stb
000001b0: 6c00 0000 aa73 7473 6400 0000 0000 0000  l....stsd.......
000001c0: 0100 0000 9a61 7663 3100 0000 0000 0000  .....avc1.......
000001d0: 0100 0000 0000 0000 0000 0000 0000 0000  ................
000001e0: 0001 e001 2000 4800 0000 4800 0000 0000  .... .H...H.....
000001f0: 0000 0100 0000 0000 0000 0000 0000 0000  ................
00000200: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000210: 0000 0000 18ff ff00 0000 3461 7663 4301  ..........4avcC.
00000220: 42c0 15ff e100 1c67 42c0 15d9 01e0 96ff  B......gB.......
00000230: c004 0003 c400 0003 0004 0000 0300 c83c  ...............<
00000240: 58b9 2001 0005 68cb 83cb 2000 0000 1070  X. ...h... ....p
00000250: 6173 7000 0000 1000 0000 0f00 0000 1073  asp............s
00000260: 7474 7300 0000 0000 0000 0000 0000 1073  tts............s
00000270: 7473 6300 0000 0000 0000 0000 0000 1473  tsc............s
00000280: 7473 7a00 0000 0000 0000 0000 0000 0000  tsz.............
00000290: 0000 1073 7463 6f00 0000 0000 0000 0000  ...stco.........
000002a0: 0000 286d 7665 7800 0000 2074 7265 7800  ..(mvex... trex.
000002b0: 0000 0000 0000 0100 0000 0100 0000 0000  ................
000002c0: 0000 0000 0000 0000 0000 6275 6474 6100  ..........budta.
000002d0: 0000 5a6d 6574 6100 0000 0000 0000 2168  ..Zmeta.......!h
000002e0: 646c 7200 0000 0000 0000 006d 6469 7261  dlr........mdira
000002f0: 7070 6c00 0000 0000 0000 0000 0000 002d  ppl............-
00000300: 696c 7374 0000 0025 a974 6f6f 0000 001d  ilst...%.too....
00000310: 6461 7461 0000 0001 0000 0000 4c61 7666  data........Lavf
00000320: 3538 2e32 302e 3130 300a                 58.20.100.
*/
func TestParseAvcMoovBox(t *testing.T) {
	str := "000003116d6f6f760000006c6d766864000000000000000000000000000003e8000000000001000001000000000000000000" +
		"0000000100000000000000000000000000000001000000000000000000000000000040000000000000000000000000000000" +
		"00000000000000000000000000000002000002137472616b0000005c746b6864000000030000000000000000000000010000" +
		"0000000000000000000000000000000000000000000000010000000000000000000000000000000100000000000000000000" +
		"0000000040000000020000000120000000000024656474730000001c656c7374000000000000000100000000000000000001" +
		"00000000018b6d646961000000206d646864000000000000000000000000000032000000000055c400000000002d68646c72" +
		"000000000000000076696465000000000000000000000000566964656f48616e646c657200000001366d696e660000001476" +
		"6d68640000000100000000000000000000002464696e660000001c6472656600000000000000010000000c75726c20000000" +
		"01000000f67374626c000000aa7374736400000000000000010000009a617663310000000000000001000000000000000000" +
		"0000000000000001e00120004800000048000000000000000100000000000000000000000000000000000000000000000000" +
		"000000000000000018ffff00000034617663430142c015ffe1001c6742c015d901e096ffc0040003c4000003000400000300" +
		"c83c58b92001000568cb83cb200000001070617370000000100000000f000000107374747300000000000000000000001073" +
		"7473630000000000000000000000147374737a000000000000000000000000000000107374636f0000000000000000000000" +
		"286d766578000000207472657800000000000000010000000100000000000000000000000000000062756474610000005a6d" +
		"657461000000000000002168646c7200000000000000006d6469726170706c0000000000000000000000002d696c73740000" +
		"0025a9746f6f0000001d6461746100000001000000004c61766635382e32302e313030"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	b := NewBox()
	r := bytes.NewReader(msgByte)
	resultBox, _, err := b.Parse(r)
	if err != nil {
		t.Error(err)
	}
	moovBox := resultBox.(*MoovBox)
	if moovBox == nil {
		t.Errorf("not MoovBox")
	}
	//PrintBox(moovBox)

	w := &bytes.Buffer{}
	writedLen, err := moovBox.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatalf("%d should equal:%d", writedLen, len(msgByte))
	}
	genData := w.Bytes()
	if !bytes.Equal(genData, msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())

		for i := 0; i < len(msgByte); i++ {
			if genData[i] != msgByte[i] {
				fmt.Println("index at:", i)
			}
		}
		t.Fatal("Serialize not equal")
	}
}

////hevc
/*
  2 00000010:                     0000 0adf 6d6f 6f76  iso6mp41....moov
  3 00000020: 0000 006c 6d76 6864 0000 0000 0000 0000  ...lmvhd........
  4 00000030: 0000 0000 0000 03e8 0000 0000 0001 0000  ................
  5 00000040: 0100 0000 0000 0000 0000 0000 0001 0000  ................
  6 00000050: 0000 0000 0000 0000 0000 0000 0001 0000  ................
  7 00000060: 0000 0000 0000 0000 0000 0000 4000 0000  ............@...
  8 00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................
  9 00000080: 0000 0000 0000 0000 0000 0002 0000 09e1  ................
 10 00000090: 7472 616b 0000 005c 746b 6864 0000 0003  trak...\tkhd....
 11 000000a0: 0000 0000 0000 0000 0000 0001 0000 0000  ................
 12 000000b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
 13 000000c0: 0000 0000 0001 0000 0000 0000 0000 0000  ................
 14 000000d0: 0000 0000 0001 0000 0000 0000 0000 0000  ................
 15 000000e0: 0000 0000 4000 0000 0200 0000 0120 0000  ....@........ ..
 16 000000f0: 0000 0024 6564 7473 0000 001c 656c 7374  ...$edts....elst
 17 00000100: 0000 0000 0000 0001 0000 0000 0000 0400  ................
 18 00000110: 0001 0000 0000 0959 6d64 6961 0000 0020  .......Ymdia...
 19 00000120: 6d64 6864 0000 0000 0000 0000 0000 0000  mdhd............
 20 00000130: 0000 3200 0000 0000 55c4 0000 0000 002d  ..2.....U......-
 21 00000140: 6864 6c72 0000 0000 0000 0000 7669 6465  hdlr........vide
 22 00000150: 0000 0000 0000 0000 0000 0000 5669 6465  ............Vide
 23 00000160: 6f48 616e 646c 6572 0000 0009 046d 696e  oHandler.....min
 24 00000170: 6600 0000 1476 6d68 6400 0000 0100 0000  f....vmhd.......
 25 00000180: 0000 0000 0000 0000 2464 696e 6600 0000  ........$dinf...
 26 00000190: 1c64 7265 6600 0000 0000 0000 0100 0000  .dref...........
 27 000001a0: 0c75 726c 2000 0000 0100 0008 c473 7462  .url ........stb
 28 000001b0: 6c00 0008 7873 7473 6400 0000 0000 0000  l...xstsd.......
 29 000001c0: 0100 0008 6868 6576 3100 0000 0000 0000  ....hhev1.......
 30 000001d0: 0100 0000 0000 0000 0000 0000 0000 0000  ................
 31 000001e0: 0001 e001 2000 4800 0000 4800 0000 0000  .... .H...H.....
 32 000001f0: 0000 0100 0000 0000 0000 0000 0000 0000  ................
 33 00000200: 0000 0000 0000 0000 0000 0000 0000 0000  ................
 34 00000210: 0000 0000 18ff ff00 0008 0268 7663 4301  ...........hvcC.
 35 00000220: 0160 0000 0090 0000 0000 003f f000 fcfd  .`.........?....
 36 00000230: f8f8 0000 0f04 2000 0100 1840 010c 01ff  ...... ....@....
 37 00000240: ff01 6000 0003 0090 0000 0300 0003 003f  ..`............?
 38 00000250: 9598 0921 0001 002e 4201 0101 6000 0003  ...!....B...`...
 39 00000260: 0090 0000 0300 0003 003f a00f 0804 8596  .........?......
 40 00000270: 5669 24ca fff0 0100 00f0 1000 0003 0010  Vi$.............
 41 00000280: 0000 0301 9080 2200 0100 0744 01c1 72b4  ......"....D..r.
 42 00000290: 6240 2700 0107 824e 0105 ffff ffff ffff  b@'....N........
 43 000002a0: ff7d 2ca2 de09 b517 47db bb55 a4fe 7fc2  .},.....G..U....
 44 000002b0: fc4e 7832 3635 2028 6275 696c 6420 3135  .Nx265 (build 15
 45 000002c0: 3129 202d 2032 2e37 3a5b 4d61 6320 4f53  1) - 2.7:[Mac OS
 46 000002d0: 2058 5d5b 636c 616e 6720 392e 302e 305d   X][clang 9.0.0]
 47 000002e0: 5b36 3420 6269 745d 2038 6269 742b 3130  [64 bit] 8bit+10
 48 000002f0: 6269 742b 3132 6269 7420 2d20 482e 3236  bit+12bit - H.26
 49 00000300: 352f 4845 5643 2063 6f64 6563 202d 2043  5/HEVC codec - C
 50 00000310: 6f70 7972 6967 6874 2032 3031 332d 3230  opyright 2013-20
 51 00000320: 3138 2028 6329 204d 756c 7469 636f 7265  18 (c) Multicore
 52 00000330: 7761 7265 2c20 496e 6320 2d20 6874 7470  ware, Inc - http
 53 00000340: 3a2f 2f78 3236 352e 6f72 6720 2d20 6f70  ://x265.org - op
 54 00000350: 7469 6f6e 733a 2063 7075 6964 3d31 3137  tions: cpuid=117
 55 00000360: 3335 3033 2066 7261 6d65 2d74 6872 6561  3503 frame-threa
 56 00000370: 6473 3d32 2077 7070 206e 6f2d 706d 6f64  ds=2 wpp no-pmod
 57 00000380: 6520 6e6f 2d70 6d65 206e 6f2d 7073 6e72  e no-pme no-psnr
 58 00000390: 206e 6f2d 7373 696d 206c 6f67 2d6c 6576   no-ssim log-lev
 59 000003a0: 656c 3d32 2062 6974 6465 7074 683d 3820  el=2 bitdepth=8
 60 000003b0: 696e 7075 742d 6373 703d 3120 6670 733d  input-csp=1 fps=
 61 000003c0: 3235 2f31 2069 6e70 7574 2d72 6573 3d34  25/1 input-res=4
 62 000003d0: 3830 7832 3838 2069 6e74 6572 6c61 6365  80x288 interlace
 63 000003e0: 3d30 2074 6f74 616c 2d66 7261 6d65 733d  =0 total-frames=
 64 000003f0: 3020 6c65 7665 6c2d 6964 633d 3020 6869  0 level-idc=0 hi
 65 00000400: 6768 2d74 6965 723d 3120 7568 642d 6264  gh-tier=1 uhd-bd
 66 00000410: 3d30 2072 6566 3d33 206e 6f2d 616c 6c6f  =0 ref=3 no-allo
 67 00000420: 772d 6e6f 6e2d 636f 6e66 6f72 6d61 6e63  w-non-conformanc
 68 00000430: 6520 6e6f 2d72 6570 6561 742d 6865 6164  e no-repeat-head
 69 00000440: 6572 7320 616e 6e65 7862 206e 6f2d 6175  ers annexb no-au
 70 00000450: 6420 6e6f 2d68 7264 2069 6e66 6f20 6861  d no-hrd info ha
 71 00000460: 7368 3d30 206e 6f2d 7465 6d70 6f72 616c  sh=0 no-temporal
 72 00000470: 2d6c 6179 6572 7320 6f70 656e 2d67 6f70  -layers open-gop
 73 00000480: 206d 696e 2d6b 6579 696e 743d 3235 206b   min-keyint=25 k
 74 00000490: 6579 696e 743d 3235 3020 676f 702d 6c6f  eyint=250 gop-lo
 75 000004a0: 6f6b 6168 6561 643d 3020 6266 7261 6d65  okahead=0 bframe
 76 000004b0: 733d 3420 622d 6164 6170 743d 3220 622d  s=4 b-adapt=2 b-
 77 000004c0: 7079 7261 6d69 6420 6266 7261 6d65 2d62  pyramid bframe-b
 78 000004d0: 6961 733d 3020 7263 2d6c 6f6f 6b61 6865  ias=0 rc-lookahe
 79 000004e0: 6164 3d32 3020 6c6f 6f6b 6168 6561 642d  ad=20 lookahead-
 80 000004f0: 736c 6963 6573 3d30 2073 6365 6e65 6375  slices=0 scenecu
 81 00000500: 743d 3430 2072 6164 6c3d 3020 6e6f 2d69  t=40 radl=0 no-i
 82 00000510: 6e74 7261 2d72 6566 7265 7368 2063 7475  ntra-refresh ctu
 83 00000520: 3d36 3420 6d69 6e2d 6375 2d73 697a 653d  =64 min-cu-size=
 84 00000530: 3820 6e6f 2d72 6563 7420 6e6f 2d61 6d70  8 no-rect no-amp
 85 00000540: 206d 6178 2d74 752d 7369 7a65 3d33 3220   max-tu-size=32
 86 00000550: 7475 2d69 6e74 6572 2d64 6570 7468 3d31  tu-inter-depth=1
 87 00000560: 2074 752d 696e 7472 612d 6465 7074 683d   tu-intra-depth=
 88 00000570: 3120 6c69 6d69 742d 7475 3d30 2072 646f  1 limit-tu=0 rdo
 89 00000580: 712d 6c65 7665 6c3d 3020 6479 6e61 6d69  q-level=0 dynami
 90 00000590: 632d 7264 3d30 2e30 3020 6e6f 2d73 7369  c-rd=0.00 no-ssi
 91 000005a0: 6d2d 7264 2073 6967 6e68 6964 6520 6e6f  m-rd signhide no
 92 000005b0: 2d74 736b 6970 206e 722d 696e 7472 613d  -tskip nr-intra=
 93 000005c0: 3020 6e72 2d69 6e74 6572 3d30 206e 6f2d  0 nr-inter=0 no-
 94 000005d0: 636f 6e73 7472 6169 6e65 642d 696e 7472  constrained-intr
 95 000005e0: 6120 7374 726f 6e67 2d69 6e74 7261 2d73  a strong-intra-s
 96 000005f0: 6d6f 6f74 6869 6e67 206d 6178 2d6d 6572  moothing max-mer
 97 00000600: 6765 3d32 206c 696d 6974 2d72 6566 733d  ge=2 limit-refs=
 98 00000610: 3320 6e6f 2d6c 696d 6974 2d6d 6f64 6573  3 no-limit-modes
 99 00000620: 206d 653d 3120 7375 626d 653d 3220 6d65   me=1 subme=2 me
100 00000630: 7261 6e67 653d 3537 2074 656d 706f 7261  range=57 tempora
101 00000640: 6c2d 6d76 7020 7765 6967 6874 7020 6e6f  l-mvp weightp no
102 00000650: 2d77 6569 6768 7462 206e 6f2d 616e 616c  -weightb no-anal
103 00000660: 797a 652d 7372 632d 7069 6373 2064 6562  yze-src-pics deb
104 00000670: 6c6f 636b 3d30 3a30 2073 616f 206e 6f2d  lock=0:0 sao no-
105 00000680: 7361 6f2d 6e6f 6e2d 6465 626c 6f63 6b20  sao-non-deblock
106 00000690: 7264 3d33 206e 6f2d 6561 726c 792d 736b  rd=3 no-early-sk
107 000006a0: 6970 2072 736b 6970 206e 6f2d 6661 7374  ip rskip no-fast
108 000006b0: 2d69 6e74 7261 206e 6f2d 7473 6b69 702d  -intra no-tskip-
109 000006c0: 6661 7374 206e 6f2d 6375 2d6c 6f73 736c  fast no-cu-lossl
110 000006d0: 6573 7320 6e6f 2d62 2d69 6e74 7261 206e  ess no-b-intra n
111 000006e0: 6f2d 7370 6c69 7472 642d 736b 6970 2072  o-splitrd-skip r
112 000006f0: 6470 656e 616c 7479 3d30 2070 7379 2d72  dpenalty=0 psy-r
113 00000700: 643d 322e 3030 2070 7379 2d72 646f 713d  d=2.00 psy-rdoq=
114 00000710: 302e 3030 206e 6f2d 7264 2d72 6566 696e  0.00 no-rd-refin
115 00000720: 6520 6e6f 2d6c 6f73 736c 6573 7320 6362  e no-lossless cb
116 00000730: 7170 6f66 6673 3d30 2063 7271 706f 6666  qpoffs=0 crqpoff
117 00000740: 733d 3020 7263 3d63 7266 2063 7266 3d32  s=0 rc=crf crf=2
118 00000750: 382e 3020 7163 6f6d 703d 302e 3630 2071  8.0 qcomp=0.60 q
119 00000760: 7073 7465 703d 3420 7374 6174 732d 7772  pstep=4 stats-wr
120 00000770: 6974 653d 3020 7374 6174 732d 7265 6164  ite=0 stats-read
121 00000780: 3d30 2069 7072 6174 696f 3d31 2e34 3020  =0 ipratio=1.40
122 00000790: 7062 7261 7469 6f3d 312e 3330 2061 712d  pbratio=1.30 aq-
123 000007a0: 6d6f 6465 3d31 2061 712d 7374 7265 6e67  mode=1 aq-streng
124 000007b0: 7468 3d31 2e30 3020 6375 7472 6565 207a  th=1.00 cutree z
125 000007c0: 6f6e 652d 636f 756e 743d 3020 6e6f 2d73  one-count=0 no-s
126 000007d0: 7472 6963 742d 6362 7220 7167 2d73 697a  trict-cbr qg-siz
127 000007e0: 653d 3332 206e 6f2d 7263 2d67 7261 696e  e=32 no-rc-grain
128 000007f0: 2071 706d 6178 3d36 3920 7170 6d69 6e3d   qpmax=69 qpmin=
129 00000800: 3020 6e6f 2d63 6f6e 7374 2d76 6276 2073  0 no-const-vbv s
130 00000810: 6172 3d32 3535 2073 6172 2d77 6964 7468  ar=255 sar-width
131 00000820: 203a 2073 6172 2d68 6569 6768 743d 3136   : sar-height=16
132 00000830: 3a31 3520 6f76 6572 7363 616e 3d30 2076  :15 overscan=0 v
133 00000840: 6964 656f 666f 726d 6174 3d35 2072 616e  ideoformat=5 ran
134 00000850: 6765 3d30 2063 6f6c 6f72 7072 696d 3d32  ge=0 colorprim=2
135 00000860: 2074 7261 6e73 6665 723d 3220 636f 6c6f   transfer=2 colo
136 00000870: 726d 6174 7269 783d 3220 6368 726f 6d61  rmatrix=2 chroma
137 00000880: 6c6f 633d 3020 6469 7370 6c61 792d 7769  loc=0 display-wi
138 00000890: 6e64 6f77 3d30 206d 6178 2d63 6c6c 3d30  ndow=0 max-cll=0
139 000008a0: 2c30 206d 696e 2d6c 756d 613d 3020 6d61  ,0 min-luma=0 ma
140 000008b0: 782d 6c75 6d61 3d32 3535 206c 6f67 322d  x-luma=255 log2-
141 000008c0: 6d61 782d 706f 632d 6c73 623d 3820 7675  max-poc-lsb=8 vu
142 000008d0: 692d 7469 6d69 6e67 2d69 6e66 6f20 7675  i-timing-info vu
143 000008e0: 692d 6872 642d 696e 666f 2073 6c69 6365  i-hrd-info slice
144 000008f0: 733d 3120 6e6f 2d6f 7074 2d71 702d 7070  s=1 no-opt-qp-pp
145 00000900: 7320 6e6f 2d6f 7074 2d72 6566 2d6c 6973  s no-opt-ref-lis
146 00000910: 742d 6c65 6e67 7468 2d70 7073 206e 6f2d  t-length-pps no-
147 00000920: 6d75 6c74 692d 7061 7373 2d6f 7074 2d72  multi-pass-opt-r
148 00000930: 7073 2073 6365 6e65 6375 742d 6269 6173  ps scenecut-bias
149 00000940: 3d30 2e30 3520 6e6f 2d6f 7074 2d63 752d  =0.05 no-opt-cu-
150 00000950: 6465 6c74 612d 7170 206e 6f2d 6171 2d6d  delta-qp no-aq-m
151 00000960: 6f74 696f 6e20 6e6f 2d68 6472 206e 6f2d  otion no-hdr no-
152 00000970: 6864 722d 6f70 7420 6e6f 2d64 6864 7231  hdr-opt no-dhdr1
153 00000980: 302d 6f70 7420 616e 616c 7973 6973 2d72  0-opt analysis-r
154 00000990: 6575 7365 2d6c 6576 656c 3d35 2073 6361  euse-level=5 sca
155 000009a0: 6c65 2d66 6163 746f 723d 3020 7265 6669  le-factor=0 refi
156 000009b0: 6e65 2d69 6e74 7261 3d30 2072 6566 696e  ne-intra=0 refin
157 000009c0: 652d 696e 7465 723d 3020 7265 6669 6e65  e-inter=0 refine
158 000009d0: 2d6d 763d 3020 6e6f 2d6c 696d 6974 2d73  -mv=0 no-limit-s
159 000009e0: 616f 2063 7475 2d69 6e66 6f3d 3020 6e6f  ao ctu-info=0 no
160 000009f0: 2d6c 6f77 7061 7373 2d64 6374 2072 6566  -lowpass-dct ref
161 00000a00: 696e 652d 6d76 2d74 7970 653d 3020 636f  ine-mv-type=0 co
162 00000a10: 7079 2d70 6963 3d31 8000 0000 1070 6173  py-pic=1.....pas
163 00000a20: 7000 0000 1000 0000 0f00 0000 1073 7474  p............stt
164 00000a30: 7300 0000 0000 0000 0000 0000 1073 7473  s............sts
165 00000a40: 6300 0000 0000 0000 0000 0000 1473 7473  c............sts
166 00000a50: 7a00 0000 0000 0000 0000 0000 0000 0000  z...............
167 00000a60: 1073 7463 6f00 0000 0000 0000 0000 0000  .stco...........
168 00000a70: 286d 7665 7800 0000 2074 7265 7800 0000  (mvex... trex...
169 00000a80: 0000 0000 0100 0000 0100 0000 0000 0000  ................
170 00000a90: 0000 0000 0000 0000 6275 6474 6100 0000  ........budta...
171 00000aa0: 5a6d 6574 6100 0000 0000 0000 2168 646c  Zmeta.......!hdl
172 00000ab0: 7200 0000 0000 0000 006d 6469 7261 7070  r........mdirapp
173 00000ac0: 6c00 0000 0000 0000 0000 0000 002d 696c  l............-il
174 00000ad0: 7374 0000 0025 a974 6f6f 0000 001d 6461  st...%.too....da
175 00000ae0: 7461 0000 0001 0000 0000 4c61 7666 3538  ta........Lavf58
176 00000af0: 2e32 302e 3130 300a                      .20.100.
*/
func TestParseHevcMoovBox(t *testing.T) {
	str := "00000adf6d6f6f760000006c6d766864000000000000000000000000000003e8000000000001000001000000000000000000" +
		"0000000100000000000000000000000000000001000000000000000000000000000040000000000000000000000000000000" +
		"00000000000000000000000000000002000009e17472616b0000005c746b6864000000030000000000000000000000010000" +
		"0000000000000000000000000000000000000000000000010000000000000000000000000000000100000000000000000000" +
		"0000000040000000020000000120000000000024656474730000001c656c7374000000000000000100000000000004000001" +
		"0000000009596d646961000000206d646864000000000000000000000000000032000000000055c400000000002d68646c72" +
		"000000000000000076696465000000000000000000000000566964656f48616e646c657200000009046d696e660000001476" +
		"6d68640000000100000000000000000000002464696e660000001c6472656600000000000000010000000c75726c20000000" +
		"01000008c47374626c0000087873747364000000000000000100000868686576310000000000000001000000000000000000" +
		"0000000000000001e00120004800000048000000000000000100000000000000000000000000000000000000000000000000" +
		"000000000000000018ffff00000802687663430101600000009000000000003ff000fcfdf8f800000f04200001001840010c" +
		"01ffff01600000030090000003000003003f959809210001002e42010101600000030090000003000003003fa00f08048596" +
		"566924cafff0010000f010000003001000000301908022000100074401c172b4624027000107824e0105ffffffffffffff7d" +
		"2ca2de09b51747dbbb55a4fe7fc2fc4e7832363520286275696c642031353129202d20322e373a5b4d6163204f5320585d5b" +
		"636c616e6720392e302e305d5b3634206269745d20386269742b31306269742b3132626974202d20482e3236352f48455643" +
		"20636f646563202d20436f7079726967687420323031332d3230313820286329204d756c7469636f7265776172652c20496e" +
		"63202d20687474703a2f2f783236352e6f7267202d206f7074696f6e733a2063707569643d31313733353033206672616d65" +
		"2d746872656164733d3220777070206e6f2d706d6f6465206e6f2d706d65206e6f2d70736e72206e6f2d7373696d206c6f67" +
		"2d6c6576656c3d322062697464657074683d3820696e7075742d6373703d31206670733d32352f3120696e7075742d726573" +
		"3d3438307832383820696e7465726c6163653d3020746f74616c2d6672616d65733d30206c6576656c2d6964633d30206869" +
		"67682d746965723d31207568642d62643d30207265663d33206e6f2d616c6c6f772d6e6f6e2d636f6e666f726d616e636520" +
		"6e6f2d7265706561742d6865616465727320616e6e657862206e6f2d617564206e6f2d68726420696e666f20686173683d30" +
		"206e6f2d74656d706f72616c2d6c6179657273206f70656e2d676f70206d696e2d6b6579696e743d3235206b6579696e743d" +
		"32353020676f702d6c6f6f6b61686561643d3020626672616d65733d3420622d61646170743d3220622d707972616d696420" +
		"626672616d652d626961733d302072632d6c6f6f6b61686561643d3230206c6f6f6b61686561642d736c696365733d302073" +
		"63656e656375743d3430207261646c3d30206e6f2d696e7472612d72656672657368206374753d3634206d696e2d63752d73" +
		"697a653d38206e6f2d72656374206e6f2d616d70206d61782d74752d73697a653d33322074752d696e7465722d6465707468" +
		"3d312074752d696e7472612d64657074683d31206c696d69742d74753d302072646f712d6c6576656c3d302064796e616d69" +
		"632d72643d302e3030206e6f2d7373696d2d7264207369676e68696465206e6f2d74736b6970206e722d696e7472613d3020" +
		"6e722d696e7465723d30206e6f2d636f6e73747261696e65642d696e747261207374726f6e672d696e7472612d736d6f6f74" +
		"68696e67206d61782d6d657267653d32206c696d69742d726566733d33206e6f2d6c696d69742d6d6f646573206d653d3120" +
		"7375626d653d32206d6572616e67653d35372074656d706f72616c2d6d76702077656967687470206e6f2d77656967687462" +
		"206e6f2d616e616c797a652d7372632d70696373206465626c6f636b3d303a302073616f206e6f2d73616f2d6e6f6e2d6465" +
		"626c6f636b2072643d33206e6f2d6561726c792d736b69702072736b6970206e6f2d666173742d696e747261206e6f2d7473" +
		"6b69702d66617374206e6f2d63752d6c6f73736c657373206e6f2d622d696e747261206e6f2d73706c697472642d736b6970" +
		"20726470656e616c74793d30207073792d72643d322e3030207073792d72646f713d302e3030206e6f2d72642d726566696e" +
		"65206e6f2d6c6f73736c65737320636271706f6666733d3020637271706f6666733d302072633d637266206372663d32382e" +
		"302071636f6d703d302e3630207170737465703d342073746174732d77726974653d302073746174732d726561643d302069" +
		"70726174696f3d312e3430207062726174696f3d312e33302061712d6d6f64653d312061712d737472656e6774683d312e30" +
		"3020637574726565207a6f6e652d636f756e743d30206e6f2d7374726963742d6362722071672d73697a653d3332206e6f2d" +
		"72632d677261696e2071706d61783d36392071706d696e3d30206e6f2d636f6e73742d766276207361723d32353520736172" +
		"2d7769647468203a207361722d6865696768743d31363a3135206f7665727363616e3d3020766964656f666f726d61743d35" +
		"2072616e67653d3020636f6c6f727072696d3d32207472616e736665723d3220636f6c6f726d61747269783d32206368726f" +
		"6d616c6f633d3020646973706c61792d77696e646f773d30206d61782d636c6c3d302c30206d696e2d6c756d613d30206d61" +
		"782d6c756d613d323535206c6f67322d6d61782d706f632d6c73623d38207675692d74696d696e672d696e666f207675692d" +
		"6872642d696e666f20736c696365733d31206e6f2d6f70742d71702d707073206e6f2d6f70742d7265662d6c6973742d6c65" +
		"6e6774682d707073206e6f2d6d756c74692d706173732d6f70742d727073207363656e656375742d626961733d302e303520" +
		"6e6f2d6f70742d63752d64656c74612d7170206e6f2d61712d6d6f74696f6e206e6f2d686472206e6f2d6864722d6f707420" +
		"6e6f2d6468647231302d6f707420616e616c797369732d72657573652d6c6576656c3d35207363616c652d666163746f723d" +
		"3020726566696e652d696e7472613d3020726566696e652d696e7465723d3020726566696e652d6d763d30206e6f2d6c696d" +
		"69742d73616f206374752d696e666f3d30206e6f2d6c6f77706173732d64637420726566696e652d6d762d747970653d3020" +
		"636f70792d7069633d31800000001070617370000000100000000f0000001073747473000000000000000000000010737473" +
		"630000000000000000000000147374737a000000000000000000000000000000107374636f0000000000000000000000286d" +
		"766578000000207472657800000000000000010000000100000000000000000000000000000062756474610000005a6d6574" +
		"61000000000000002168646c7200000000000000006d6469726170706c0000000000000000000000002d696c737400000025" +
		"a9746f6f0000001d6461746100000001000000004c61766635382e32302e313030"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	b := NewBox()
	r := bytes.NewReader(msgByte)
	resultBox, _, err := b.Parse(r)
	if err != nil {
		t.Error(err)
	}
	moovBox := resultBox.(*MoovBox)
	if moovBox == nil {
		t.Errorf("not MoovBox")
	}
	//PrintBox(moovBox)

	w := &bytes.Buffer{}
	writedLen, err := moovBox.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatalf("%d should equal:%d", writedLen, len(msgByte))
	}
	genData := w.Bytes()
	if !bytes.Equal(genData, msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())

		for i := 0; i < len(msgByte); i++ {
			if genData[i] != msgByte[i] {
				fmt.Println("index at:", i)
			}
		}
		t.Fatal("Serialize not equal")
	}
}

/*
00000010:                     0000 02ca 6d6f 6f76  iso6mp41....moov
00000020: 0000 006c 6d76 6864 0000 0000 0000 0000  ...lmvhd........
00000030: 0000 0000 0000 03e8 0000 0000 0001 0000  ................
00000040: 0100 0000 0000 0000 0000 0000 0001 0000  ................
00000050: 0000 0000 0000 0000 0000 0000 0001 0000  ................
00000060: 0000 0000 0000 0000 0000 0000 4000 0000  ............@...
00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000080: 0000 0000 0000 0000 0000 0002 0000 01cc  ................
00000090: 7472 616b 0000 005c 746b 6864 0000 0003  trak...\tkhd....
000000a0: 0000 0000 0000 0000 0000 0001 0000 0000  ................
000000b0: 0000 0000 0000 0000 0000 0000 0000 0001  ................
000000c0: 0100 0000 0001 0000 0000 0000 0000 0000  ................
000000d0: 0000 0000 0001 0000 0000 0000 0000 0000  ................
000000e0: 0000 0000 4000 0000 0000 0000 0000 0000  ....@...........
000000f0: 0000 0024 6564 7473 0000 001c 656c 7374  ...$edts....elst
00000100: 0000 0000 0000 0001 0000 0000 0000 0000  ................
00000110: 0001 0000 0000 0144 6d64 6961 0000 0020  .......Dmdia...
00000120: 6d64 6864 0000 0000 0000 0000 0000 0000  mdhd............
00000130: 0000 3e80 0000 0000 55c4 0000 0000 002d  ..>.....U......-
00000140: 6864 6c72 0000 0000 0000 0000 736f 756e  hdlr........soun
00000150: 0000 0000 0000 0000 0000 0000 536f 756e  ............Soun
00000160: 6448 616e 646c 6572 0000 0000 ef6d 696e  dHandler.....min
00000170: 6600 0000 1073 6d68 6400 0000 0000 0000  f....smhd.......
00000180: 0000 0000 2464 696e 6600 0000 1c64 7265  ....$dinf....dre
00000190: 6600 0000 0000 0000 0100 0000 0c75 726c  f............url
000001a0: 2000 0000 0100 0000 b373 7462 6c00 0000   ........stbl...
000001b0: 6773 7473 6400 0000 0000 0000 0100 0000  gstsd...........
000001c0: 576d 7034 6100 0000 0000 0000 0100 0000  Wmp4a...........
000001d0: 0000 0000 0000 0200 1000 0000 003e 8000  .............>..
000001e0: 0000 0000 3365 7364 7300 0000 0003 8080  ....3esds.......
000001f0: 8022 0001 0004 8080 8014 4015 0000 0000  ."........@.....
00000200: 0113 8800 0000 0005 8080 8002 1408 0680  ................
00000210: 8080 0102 0000 0010 7374 7473 0000 0000  ........stts....
00000220: 0000 0000 0000 0010 7374 7363 0000 0000  ........stsc....
00000230: 0000 0000 0000 0014 7374 737a 0000 0000  ........stsz....
00000240: 0000 0000 0000 0000 0000 0010 7374 636f  ............stco
00000250: 0000 0000 0000 0000 0000 0028 6d76 6578  ...........(mvex
00000260: 0000 0020 7472 6578 0000 0000 0000 0001  ... trex........
00000270: 0000 0001 0000 0000 0000 0000 0000 0000  ................
00000280: 0000 0062 7564 7461 0000 005a 6d65 7461  ...budta...Zmeta
00000290: 0000 0000 0000 0021 6864 6c72 0000 0000  .......!hdlr....
000002a0: 0000 0000 6d64 6972 6170 706c 0000 0000  ....mdirappl....
000002b0: 0000 0000 0000 0000 2d69 6c73 7400 0000  ........-ilst...
000002c0: 25a9 746f 6f00 0000 1d64 6174 6100 0000  %.too....data...
000002d0: 0100 0000 004c 6176 6635 382e 3230 2e31  .....Lavf58.20.1
000002e0: 3030                                     00
*/
func TestParseAudioMoovBox(t *testing.T) {
	str := "000002ca6d6f6f760000006c6d766864000000000000000000000000000003e8000000000001000001000000000000000000" +
		"0000000100000000000000000000000000000001000000000000000000000000000040000000000000000000000000000000" +
		"00000000000000000000000000000002000001cc7472616b0000005c746b6864000000030000000000000000000000010000" +
		"0000000000000000000000000000000000010100000000010000000000000000000000000000000100000000000000000000" +
		"0000000040000000000000000000000000000024656474730000001c656c7374000000000000000100000000000000000001" +
		"0000000001446d646961000000206d64686400000000000000000000000000003e800000000055c400000000002d68646c72" +
		"0000000000000000736f756e000000000000000000000000536f756e6448616e646c657200000000ef6d696e660000001073" +
		"6d686400000000000000000000002464696e660000001c6472656600000000000000010000000c75726c2000000001000000" +
		"b37374626c00000067737473640000000000000001000000576d703461000000000000000100000000000000000002001000" +
		"0000003e80000000000033657364730000000003808080220001000480808014401500000000011388000000000580808002" +
		"14080680808001020000001073747473000000000000000000000010737473630000000000000000000000147374737a0000" +
		"00000000000000000000000000107374636f0000000000000000000000286d76657800000020747265780000000000000001" +
		"0000000100000000000000000000000000000062756474610000005a6d657461000000000000002168646c72000000000000" +
		"00006d6469726170706c0000000000000000000000002d696c737400000025a9746f6f0000001d6461746100000001000000" +
		"004c61766635382e32302e313030"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	b := NewBox()
	r := bytes.NewReader(msgByte)
	resultBox, parsedLen, err := b.Parse(r)
	if err != nil {
		t.Error(err)
	}
	moovBox := resultBox.(*MoovBox)
	if moovBox == nil {
		t.Errorf("not MoovBox")
	}
	if parsedLen != len(msgByte) {
		t.Errorf("parsedLen:%d expect:%d", parsedLen, len(msgByte))
	}
	//PrintBox(moovBox)

	w := &bytes.Buffer{}
	writedLen, err := moovBox.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatalf("%d should equal:%d", writedLen, len(msgByte))
	}
	genData := w.Bytes()
	if !bytes.Equal(genData, msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())

		for i := 0; i < len(msgByte); i++ {
			if genData[i] != msgByte[i] {
				fmt.Println("index at:", i)
			}
		}
		t.Fatal("Serialize not equal")
	}
}

/*
004312c0:                                 00 0002  ................
004312d0: 366d 6672 6100 0001 0f74 6672 6101 0000  6mfra....tfra...
004312e0: 0000 0000 0100 0000 0000 0000 0d00 0000  ................
004312f0: 0000 7e6a 8000 0000 0000 0374 c701 0101  ..~j.......t....
00431300: 0000 0000 0135 8580 0000 0000 0009 8ee4  .....5..........
00431310: 0101 0100 0000 0001 eca0 8000 0000 0000  ................
00431320: 12c1 3301 0101 0000 0000 02a3 bb80 0000  ..3.............
00431330: 0000 001c e5b4 0101 0100 0000 0002 fdd2  ................
00431340: 0000 0000 0000 2060 b901 0101 0000 0000  ...... `........
00431350: 03b4 ed00 0000 0000 0025 ce75 0101 0100  .........%.u....
00431360: 0000 0004 6c08 0000 0000 0000 2bb2 6d01  ....l.......+.m.
00431370: 0101 0000 0000 0523 2300 0000 0000 0031  .......##......1
00431380: c967 0101 0100 0000 0005 8836 0000 0000  .g.........6....
00431390: 0000 34ad d201 0101 0000 0000 05c4 4500  ..4...........E.
004313a0: 0000 0000 0036 cb52 0101 0100 0000 0006  .....6.R........
004313b0: 7b60 0000 0000 0000 3d11 ea01 0101 0000  {`......=.......
004313c0: 0000 06cf 9a80 0000 0000 003f bbb7 0101  ...........?....
004313d0: 0100 0000 0006 fc48 0000 0000 0000 4114  .......H......A.
004313e0: 3201 0101 0000 010f 7466 7261 0100 0000  2.......tfra....
004313f0: 0000 0002 0000 0000 0000 000d 0000 0000  ................
00431400: 0001 b000 0000 0000 0003 74c7 0101 0100  ..........t.....
00431410: 0000 0000 0424 0000 0000 0000 098e e401  .....$..........
00431420: 0101 0000 0000 0006 9400 0000 0000 0012  ................
00431430: c133 0101 0100 0000 0000 0904 0000 0000  .3..............
00431440: 0000 1ce5 b401 0101 0000 0000 000a 3800  ..............8.
00431450: 0000 0000 0020 60b9 0101 0100 0000 0000  ..... `.........
00431460: 0ca8 0000 0000 0000 25ce 7501 0101 0000  ........%.u.....
00431470: 0000 000f 1800 0000 0000 002b b26d 0101  ...........+.m..
00431480: 0100 0000 0000 118c 0000 0000 0000 31c9  ..............1.
00431490: 6701 0101 0000 0000 0012 e400 0000 0000  g...............
004314a0: 0034 add2 0101 0100 0000 0000 13b0 0000  .4..............
004314b0: 0000 0000 36cb 5201 0101 0000 0000 0016  ....6.R.........
004314c0: 2000 0000 0000 003d 11ea 0101 0100 0000   ......=........
004314d0: 0000 1740 0000 0000 0000 3fbb b701 0101  ...@......?.....
004314e0: 0000 0000 0017 d800 0000 0000 0041 1432  .............A.2
004314f0: 0101 0100 0000 106d 6672 6f00 0000 0000  .......mfro.....
00431500: 0002 36                                  ..6
*/

func TestParseMfraBox(t *testing.T) {
	str := "000002366d6672610000010f746672610100000000000001000000000000000d00000000007e6a8000000000000374c70101" +
		"0100000000013585800000000000098ee40101010000000001eca080000000000012c1330101010000000002a3bb80000000" +
		"00001ce5b40101010000000002fdd20000000000002060b90101010000000003b4ed00000000000025ce7501010100000000" +
		"046c080000000000002bb26d0101010000000005232300000000000031c9670101010000000005883600000000000034add2" +
		"0101010000000005c44500000000000036cb5201010100000000067b600000000000003d11ea0101010000000006cf9a8000" +
		"000000003fbbb70101010000000006fc480000000000004114320101010000010f7466726101000000000000020000000000" +
		"00000d000000000001b00000000000000374c701010100000000000424000000000000098ee4010101000000000006940000" +
		"0000000012c133010101000000000009040000000000001ce5b401010100000000000a380000000000002060b90101010000" +
		"0000000ca800000000000025ce7501010100000000000f180000000000002bb26d0101010000000000118c00000000000031" +
		"c967010101000000000012e400000000000034add2010101000000000013b000000000000036cb5201010100000000001620" +
		"0000000000003d11ea010101000000000017400000000000003fbbb7010101000000000017d8000000000000411432010101" +
		"000000106d66726f0000000000000236"
	msgByte := make([]byte, len(str)/2)
	_, err := hex.Decode(msgByte, []byte(str))
	if err != nil {
		t.Errorf("hex styp box fail:%s", err)
	}

	b := NewBox()
	r := bytes.NewReader(msgByte)
	resultBox, parsedLen, err := b.Parse(r)
	if err != nil {
		t.Error(err)
	}
	mfraBox := resultBox.(*MfraBox)
	if mfraBox == nil {
		t.Errorf("not MfraBox")
	}
	if parsedLen != len(msgByte) {
		t.Errorf("parsedLen:%d expect:%d", parsedLen, len(msgByte))
	}
	//PrintBox(mfraBox)

	w := &bytes.Buffer{}
	writedLen, err := mfraBox.Serialize(w)
	if err != nil {
		t.Error(err)
	}
	if writedLen != len(msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())
		t.Fatalf("%d should equal:%d", writedLen, len(msgByte))
	}
	genData := w.Bytes()
	if !bytes.Equal(genData, msgByte) {
		fmt.Printf("%X \n", msgByte)
		fmt.Printf("%X \n", w.Bytes())

		for i := 0; i < len(msgByte); i++ {
			if genData[i] != msgByte[i] {
				fmt.Println("index at:", i)
			}
		}
		t.Fatal("Serialize not equal")
	}
}
