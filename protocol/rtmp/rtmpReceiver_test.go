package rtmp

import (
	"bytes"
	"encoding/hex"
	"io"
	"testing"
)

var (
	connectMsg = "0300000000008b1400000000020007636f6e6e656374003ff00000000000000300036170700200046c697665000474797065" +
		"02000a6e6f6e707269766174650008666c617368566572020024464d4c452f332e302028636f6d70617469626c653b204c61" +
		"766635372e38332e313030290005746355726c02001a72746d703a2f2f3132372e302e302e313a31" +
		"C33933352f6c697665000009"
		//C3 wireshark抓包的时候合并了，这个是自己加的
	setChunkSizeMsg  = "02000000000004010000000000000400"
	releaseStreamMsg = "4300000000001f1402000d72656c6561736553747265616d004000000000000000050200027431"
	fcPublishMsg     = "4300000000001b1402000946435075626c697368004008000000000000050200027431"
	createStreamMsg  = "430000000000191402000c63726561746553747265616d00401000000000000005"
	publishMsg       = "0800000000002014010000000200077075626c6973680040140000000000000502000274310200046c697665"
	setDataFrameMsg  = "04000000000135120100000002000d40736574446174614672616d6502000a6f6e4d65746144617461080000000d00086" +
		"475726174696f6e0000000000000000000005776964746800407e0000000000000006686569676874004072000000000000000d76696465" +
		"6f64617461726174650040686a000000000000096672616d6572617465004039000000000000000c766964656f636f64656369640040000" +
		"00000000000000d617564696f6461746172617465000000000000000000000f617564696f73616d706c65726174650040e7700000000000" +
		"000f617564696f73616d706c6573697a65004030000000000000000673746572656f0101000c617564696f636f646563696400400000000" +
		"00000000007656e636f64657202000d4c61766635372e38332e313030000866696c6573697a65000000000000000000000009"

	audioMsg1 = "0400000000018108010000002ffffb94640000032f26400573000000000d20a00001163c971419ee00000000348300000030" +
		"c068c3418260a9874a26855a9b7df6705799af49265e611d9eee7699a9bbd4665d1090808140c49f302805731ae26f396fd9" +
		"7d1ca2317a56e43b962570dbfeffbfee5aec620d71dc872312ca4c3bf9e75e9e9edf7f55292c733af9e187ffff374f188c52" +
		"6063f43b462483fa65a22a063a09726338cae6150846635a324676e08069c605a621a5a06e515026dd874c622c28461e4114" +
		"627a308623837e650e39264a454864c1b10004cfca53041a0fa2343108e505cc3820319090c020e3320a4cc20630911cd642" +
		"d36c1805828840ee99582661802c8ccda6131203a46edc42311c1c002983949d6a502c2f427ba23c331507164c580280f417" +
		"a37fdab05856241608004f5129798c8188685ce6cd747814019e2ddfad200d4c42150e7f1f4cfb534d77244c02670e189a4d" +
		"4a72ce62ba0c3e13cc72514c141a4d2a2a8302233209f319c3032547931b82b3b77320a1105280622920cac6841924"

	audioMsg2 = "840000182ffffb9464220ff3bd2549877720002fe146e0ee98014dfc972c0eef0888ad059cc19f6c8c68b50531c441a058e5" +
		"991c606425a2922b96affeeac01ac791dca45965352a8b3ce245ba8c09a3234e39f51bf3dfffb709c88d1af91000460082a6" +
		"0505061089a62214463db866b5ae078c5186c68fe65a8c261c0780505c500449753a82e180858b93308034c371a4dc7024c5" +
		"561cce10f0c2f2c0e2f144c0b3a0e3050cc53024d6510607ce5e3ca8326f328050634e67118c9d0a1768880d88b0f8259eb4" +
		"443f7cdbd7015396cc18c88b154ae755b6cbfe93094fffc4e21dfde0fb53ab3b9cfe3669327938918acfa4373ff5fb1aa588" +
		"5fdb6d75932bd40e0864e948c1c0184c07502cfb1f494d008aacfef30dc964cbc98c483cc0c01075894b6b52dae23010003e" +
		"30604e753498408330161315313d831e30e14de935c7483c313bc80a3834c641317a0035314b00103027c4e53171887a3097" +
		"0022321a881f304440243078c86c305c81c03081c46a302f80821a029c4248188c319a32078800"

	audioMsg3 = "c42ffffb94642e8ff694284183fddc201ec4582074027c0fc49d240eef2c409a132001d03df0330881530a0f334949730009" +
		"c0094861519664697460e25079583a66a91a6790f80413376060c919a1000045ab384528bd57dcca030c4c1842a6343e9bea" +
		"da051007351ad339cd879b192069e982021c39699f4b1cd12a8302c34c11e48a2d95901028998613804354dcbac18926164a" +
		"6381696745dd5794436ca11bc080e1872ba9d670a189c0e060f8b3e113f7bbceea06ee861158c1d9dcda51e0cee6acd6a208" +
		"c4e754efe688c3c694d3d980c0f040cb90acc640582aa8989a0f192a901a5229aafc9820f198bb92050082c8812a250b4be5" +
		"10652abdb67a87452ea18019af53c08095d89a6fcf26a6fffff4c6a1f4c2a4afd7ae2eb04a148497e62e6386ffcba56eac33" +
		"0f4b2679352b9eaee348208bf9636a762ce2814003082233ea18130f0133140112e33117fa334d8fff74d08dd21c63304216" +
		"2f300b01830b84513077050315203032300a5313021435da29d318c0e437e22830e23f35"

	audioMsg4 = "c42ffffb9464118ff474274703ddd2302564b7d068197c10b49d240f734880a0131ec1806260601632b41a3292c431a05132" +
		"0a4b3170d432b0f734a42d11a0a2c57982c1a847f199848681a28b7ed2c1dad89a99960b868c3200cf15d35214c82a3022cb" +
		"c89f6ffc5e8fbcffba3a1912c2172dec637488e4e11a910ea5a4951c043c4ef58a2cf17fb5cc7b4ef4df72dda9cdd246dd85" +
		"ce5d431274fa79005e0ec81c5c980b4284cf59bfcfdd00c1c50b672aca2e78ab4e602e02060643e264b80c860401d0610617" +
		"260a633466d630e60e613c69123d60e11d382824c0058379d5cc2234362278d064235c5a8591e711904b20a0d2f1950534f1" +
		"a0206570e818323baeca533a306809e50c6ec21876a9fc5aba77699277ffff69e8e73aeead5883629633048154b04382afd6" +
		"19fa7f9163f729742dffe2d9dff8dcdd9ffd732a25ce938932104533955e9b829b32a7829afc4a416f0dffeea025c24ea776" +
		"675254bc8b8f0530cc0630c1253c8072312c4a38541131dd2d3b3df830356133534c30ec"

	connectRespMsg = "020000000000040500000000002625a0020000000000050600000000002625a0020200000000000401000000000000040003" +
		"0000000000be14000000000200075f726573756c74003ff0000000000000030006666d7356657202000d464d532f332c302c" +
		"312c313233000c6361706162696c697469657300403f0000000000000000090300056c6576656c0200067374617475730004" +
		"636f646502001d4e6574436f6e6e656374696f6e2e436f6e6e6563742e53756363657373000b6465736372697074696f6e02" +
		"0015436f6e6e656374696f6e207375636365656465642e000e6f626a656374456e636f64696e670000000000000000000000" +
		"09"
)

type testRecv struct {
	r         io.Reader
	writeChan chan int
	writeBuf  *bytes.Buffer
}

func newTestRecv(msg []byte) *testRecv {
	return &testRecv{
		r:         bytes.NewReader(msg),
		writeBuf:  &bytes.Buffer{},
		writeChan: make(chan int),
	}
}

func (hs *testRecv) Read(p []byte) (n int, err error) {
	return hs.r.Read(p)
}

func (hs *testRecv) Write(p []byte) (n int, err error) {
	return hs.writeBuf.Write(p)
}

func TestRtmpReceiver(t *testing.T) {
	msg := testc0c1c2 + connectMsg + setChunkSizeMsg + releaseStreamMsg + fcPublishMsg + createStreamMsg +
		publishMsg + setDataFrameMsg + audioMsg1 + audioMsg2 + audioMsg3 + audioMsg4
	msgByte := make([]byte, len(msg)/2)
	_, err := hex.Decode(msgByte, []byte(msg))
	if err != nil {
		t.Errorf("hex decode msg fail:%s", err)
	}

	rw := newTestRecv(msgByte)

	recv := NewRtmpReceiver(rw)

	err = recv.Start()
	if err != nil && err != io.EOF {
		t.Fatal("recv.Start", err)
	}

	connectRespMsgByte := make([]byte, len(connectRespMsg)/2)
	_, err = hex.Decode(connectRespMsgByte, []byte(connectRespMsg))
	if err != nil {
		t.Errorf("hex decode msg fail:%s", err)
	}

	offset := 1 + 1536 + 1536 // 1 for s0, 1536 s1 s2
	allresp := rw.writeBuf.Bytes()
	realConnectResp := allresp[offset : offset+len(connectRespMsgByte)]

	if bytes.Compare(connectRespMsgByte, realConnectResp) != 0 {
		t.Fatalf("connect response msg not equal:")
	}
}
