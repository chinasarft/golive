package rtmp

import (
	"bytes"
	"context"
	"encoding/hex"
	"io"
	"testing"
)

var (
	connectMsg = "0300000000008b1400000000020007636f6e6e656374003ff00000000000000300036170700200046c697665000474797065" +
		"02000a6e6f6e707269766174650008666c617368566572020024464d4c452f332e302028636f6d70617469626c653b204c61" +
		"766635372e38332e313030290005746355726c02001a72746d703a2f2f3132372e302e302e313a31" +
		"C33933352f6c697665000009"
		//C3 wireshark抓包的时候合并了，这个是自己加的
	setChunkSizeMsg  = "02000000000004010000000000000400"
	releaseStreamMsg = "4300000000001f1402000d72656c6561736553747265616d004000000000000000050200027431"
	fcPublishMsg     = "4300000000001b1402000946435075626c697368004008000000000000050200027431"
	createStreamMsg  = "430000000000191402000c63726561746553747265616d00401000000000000005"
	publishMsg       = "0800000000002014010000000200077075626c6973680040140000000000000502000274310200046c697665"
	setDataFrameMsg  = "04000000000135120100000002000d40736574446174614672616d6502000a6f6e4d65746144617461080000000d00086475" +
		"726174696f6e0000000000000000000005776964746800407e0000000000000006686569676874004072000000000000000d" +
		"766964656f646174617261746500000000000000000000096672616d6572617465004039000000000000000c766964656f63" +
		"6f646563696400401c000000000000000d617564696f646174617261746500404a6da000000000000f617564696f73616d70" +
		"6c65726174650040cf400000000000000f617564696f73616d706c6573697a65004030000000000000000673746572656f01" +
		"00000c617564696f636f64656369640040240000000000000007656e636f64657202000d4c61766635372e38332e31303000" +
		"0866696c6573697a65000000000000000000000009"

	audioSeqHdr = "040000000000020801000000af00"

	audioMsg1 = "0400000000022b0801000000af01de04004c61766335372e3130372e31303000020cab5edc50170d8e08e1d1d85df3c654b5" +
		"4eaa0548d6f3dbbaabdf152a2ea0bffe37ffff45980ee0d6a4c648330f4d933afa0adc390a38e2199c311972ea694421a619" +
		"d4a4d63fc413adb127bbd4ccf62b7844e380832710b789218ebf8f22101b0844aa431d96235a093c4e00920d321ad30135c8" +
		"272a0936ca2777024a808855ab7641a627f07f8e7449068099e693a5349c48a4e44324309082bb4d79398428c7fd2f29fce1" +
		"04bab04749e87b70a4189e71d8fc6f49c619f3ba2f9f07ba0744055be136e4137e65401008c818be0a4c21f7ae57de7c8d17" +
		"e88ed4e687e33777f738a72b809841d1df9c9066a5321537186a81591a3b1adbbd6e47717307ae55393c9638db8cd1abd812" +
		"01a08175cf65bd1a600860a342e3ed79ad1675feab1875357d79fe8b19e79e721cbf27ff9da4c19d59fdb8d63f6ef85fd87f" +
		"4fe168b3f51f79f79a00003037731bec070010411239f6a7ff930c86800000000011a94f0e8519edb6214228b6fc43e21550" +
		"213ee4c4314860890410ce739ce73863a6d7022265d87c9f635943134fbb12c6318c63739cb75395f633000001ce18e9b5f2" +
		"45a5fd3310a8c33d06284cb3c77c69cfe47b131862a34fe1beb3adce519099a7f6ebf61fe0f41d9fe7edb909d7ebfb0fccd9" +
		"50015d9c41a1a1c1802a8b25487c0d12a0c9b072e009b05520f1fa70035de62080d8e320a258e220a2606420711330881404" +
		"ce4c783268363c11341880844cc4204270"

	audioMsg2 = "440000400001a308af0101249edad0f7a4481aea1d17206cd7709c81b35f697f5afc6b38714b78dfed5d75d6713ceb7d2fff" +
		"1ebdb8e35cf1e7adf153fe3d6bbfe6babd49dcf8ffa8d61fb56033dfeafa46d6d06db23509837b1e9db1df115fdd678a4f0c" +
		"aa4286cb22daa024716f85c768d52858dd88744127428d6c5756758851005c5cfe991a9acd66214c1b8825fa1ef48c826d5a" +
		"d5106bbded4d9bebed0daefd1f565bab0972a439df7555f84504a546934ddddb8eb669dc29891cfdfa29b29f9d3104858588" +
		"bdd27bcaf3fb2e0234f8523d27a1dbe3fcff41af268694f8bcbe46ac9cf5c1d5ad6078514a5507348ac5b869f42ba6f2c866" +
		"ebab50d1ac1fde6f6fd904c554f816efae1cb8a10c2404a070fdc9c57ee6ae78f6bd1109407ca0e3d9b4e58ee731dbf58563" +
		"3cfc012de78924c1bc016f430ccaba82f985195fa41a620646a9fbb652ea649db607c732eb47332f6931fb3dac9c81482919" +
		"4747e97733c4d29d1da75dfe9f03c0bdf849c7af7dc6d90136fb833c4d0064069ae1442649b9187a57c21ef3b2a69c4346fc" +
		"0486773f271e3643aa758aa59f2795ab11a5b07c14986618343007"

	audioMsg3 = "4400004000018408af0101389ed87ed5661ad854c4da8f1489b55ca314f1e6afcf8f6f3cf8e69f5ffb7fa7e74003db7efc00" +
		"0ffaff1f9d55803ff55b7d1e38e6ddc813c04f846f5df7d912a58d10fe99b4720e689234ce52e06c63bf498d14985f7e18b1" +
		"9d1c370d998e1da4092a7ccdcfaff786a79ffefdf8ffdf40dce5d410a420674d786da8b9077274ca368892326e27246ab938" +
		"2fe5f6f50ed5e86dbc61a3dd5b60509221f034335c5f07952fa3f02c2f390b15999a4326654b9653eb5b1be418a34516e5bc" +
		"4729b9d9a38cc513ecd36fc20651d145709801e71d52b2645849304c6cac7c6611a22c72b2b9bb7f539fbe3aa370f0a84589" +
		"f2d2742e13c2948aa911463a44f3520ba8dde40397c39004b4b74546d311bc553ad41c1b6bdadb8c1a84a09ceab8b493e41e" +
		"20a051a648dc92344c029c1332777f5ffdc5e5739212844997009ec2e5ba1729077c3e5f5fd3ddff5f2f9e33cb8f7a6f702c" +
		"8b006a0048d2ecfe1f2d45e35037a770f701c8a1bed0645e350afb5842e247f27ba72ef23b95f996aea497366c1c"

	audioMsg4 = "440000400001e008af010130f5ae547b0c2d84e130908e2fdff77cf53e78d9282f1778ab2eb8a913fe7fc700e145aa2d3b97" +
		"e5acde4e4c0274e69206989c5c86078b23081451dc391386e57513e29d309f0cea44b21588f7be9047bff4c25d37c684ba8e" +
		"e096ce4dbcacac4ed6ccc407208488a4d15c816a59f1c8e061598297174e68ca61b14fec3da3d07955f74838a30a8fe2ef2c" +
		"a608cf302de919b347368b76b6c78b681a3a99f9ccc5654db9e63390e19b2232d23fb0f736f194a18482275da86cf7258e92" +
		"621558a08f56be02a5e5f87f81e8265d5d248448ecdcc44d72638c4af8354563283efacfdf7aad45458df8d98f22992b9f48" +
		"8c9db3d4f2b3ff01ee67b792e37066d4e2e96c6281629d63c1d04701cee030c2ee6b4a606d898863c3148e1174aa4842c5fa" +
		"19ba8edac7faee66eaed6d6a62a460c067263520840a432b3a28f7cb0a21084211b09c06736bab4ce8105dd46972dbab4189" +
		"71ee3103776335e4847539c7581b206b738cb6ea248190d1c578d08dcb2ecfbca0cd01471084211e922d5d151064196f23f7" +
		"7ffa9a4bff3d5bed727200000304db9e5c7fef839cfd93aa200000383ff1abd7672f22f8dd7f1385a5adcad2cbaaebb95a1d" +
		"477dcac4001e07f70e81d00cf8c007bc2743ff0984bd0b2210cf7f42c5ff8620630b810e2780"

	connectRespMsg = "020000000000040500000000002625a0020000000000050600000000002625a0020200000000000401000000000000040003" +
		"0000000000be14000000000200075f726573756c74003ff0000000000000030006666d7356657202000d464d532f332c302c" +
		"312c313233000c6361706162696c697469657300403f0000000000000000090300056c6576656c0200067374617475730004" +
		"636f646502001d4e6574436f6e6e656374696f6e2e436f6e6e6563742e53756363657373000b6465736372697074696f6e02" +
		"0015436f6e6e656374696f6e207375636365656465642e000e6f626a656374456e636f64696e670000000000000000000000" +
		"09"

	videoSeqHdr = "06000000000031090100000017000000000142c015ffe1001c6742c015d901e096ffc0040003c400000300040000" +
		"0300c83c58b92001000568cb83cb20"
)

type testHandler struct {
	r         io.Reader
	writeChan chan int
	writeBuf  *bytes.Buffer
}

func newTestHandler(msg []byte) *testHandler {
	return &testHandler{
		r:         bytes.NewReader(msg),
		writeBuf:  &bytes.Buffer{},
		writeChan: make(chan int),
	}
}

func (hs *testHandler) Read(p []byte) (n int, err error) {
	return hs.r.Read(p)
}

func (hs *testHandler) Write(p []byte) (n int, err error) {
	return hs.writeBuf.Write(p)
}

func (hs *testHandler) OnSourceDetermined(h *RtmpHandler, ctx context.Context) (PutAVDMessage, error) {
	output := func(m *Message) error {
		return nil
	}
	return output, nil
}

func (hs *testHandler) OnSinkDetermined(h *RtmpHandler, ctx context.Context) error {
	return nil
}
func (hs *testHandler) OnDestroySource(h *RtmpHandler) {
	return
}

func (hs *testHandler) OnDestroySink(h *RtmpHandler) {
	return
}

func TestRtmpReceiver(t *testing.T) {
	msg := testc0c1c2 + connectMsg + setChunkSizeMsg + releaseStreamMsg + fcPublishMsg + createStreamMsg +
		publishMsg + setDataFrameMsg + videoSeqHdr + audioSeqHdr + audioMsg1 + audioMsg2 + audioMsg3 + audioMsg4
	msgByte := make([]byte, len(msg)/2)
	_, err := hex.Decode(msgByte, []byte(msg))
	if err != nil {
		t.Errorf("hex decode msg fail:%s", err)
	}

	rw := newTestHandler(msgByte)

	handler := NewRtmpHandler(rw, rw)

	err = handler.Start()
	if err != nil && err != io.EOF {
		t.Fatal("handler.Start", err)
	}

	connectRespMsgByte := make([]byte, len(connectRespMsg)/2)
	_, err = hex.Decode(connectRespMsgByte, []byte(connectRespMsg))
	if err != nil {
		t.Errorf("hex decode msg fail:%s", err)
	}

	offset := 1 + 1536 + 1536 // 1 for s0, 1536 s1 s2
	allresp := rw.writeBuf.Bytes()
	realConnectResp := allresp[offset : offset+len(connectRespMsgByte)]

	if bytes.Compare(connectRespMsgByte, realConnectResp) != 0 {
		t.Fatalf("connect response msg not equal:")
	}
}
